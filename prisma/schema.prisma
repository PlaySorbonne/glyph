// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerID String?  @map("provider_id")
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerID])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed     DateTime @default(now())

  @@map("sessions")
}

// table pour gérer tout de qui est interface web
model TheGame {
  id          Int     @id @default(1)
  description String?
}

model User {
  id            String  @id @default(cuid())
  name          String? @unique
  displayName   String?
  email         String? @unique
  emailVerified Boolean @default(false)
  image         String?
  isAdmin       Boolean @default(false)
  score         Int     @default(0)
  welcomed      Boolean @default(false)

  createdAt DateTime @default(now())

  fraternityId Int?
  fraternity   Fraternity? @relation(fields: [fraternityId], references: [id])

  accounts Account[]
  sessions Session[]
  History  History[]

  @@map("users")
}

model Fraternity {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  score       Int     @default(0)

  users User[]
}

model Quest {
  // ID
  id          Int       @id @default(autoincrement())
  // Global Info
  title       String    @unique
  mission     String?
  description String?
  indice      String?
  lore        String?
  lieu        String?
  starts      DateTime?
  ends        DateTime?
  createdAt   DateTime  @default(now())
  horaires    String?
  points      Int       @default(1)
  
  // for Secondary quests
  secondary   Boolean   @default(true)

  // for Main Quest
  glyphPositionX Int? @default(0) // Position du glyph dans la grille, par défaut 0, max 29
  glyphPositionY Int? @default(0) // Position du glyph dans la grille, par défaut 0, max 29
  glyph       String? // must be smth like 01010101,010101011,... Doit être un carré parfait, nombre de lignes = nombre de colonnes.
                      // Maximum 29 * 29
  img         String? // LEGACY. may not be used, is replaced by the glyph

  // For wrapping quests
  parentId   Int?    
  parent     Quest?     @relation("SubQuests", fields: [parentId], references: [id])
  subQuests  Quest[]    @relation("SubQuests")


  // mainly for secondary quests the qrcodes
  Code Code[]

  History History[]
}

model History {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeId      Int?
  code        Code?    @relation(fields: [codeId], references: [id], onDelete: NoAction)
  questId     Int?
  quest       Quest?   @relation(fields: [questId], references: [id], onDelete: Cascade)
  points      Int
  date        DateTime @default(now())
  description String?
}

model Code {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  isQuest     Boolean   @default(false) // true si ça représente la fin d'une quête, faux si c'est juste des points
  questId     Int?
  quest       Quest?    @relation(fields: [questId], references: [id], onDelete: Cascade)
  points      Int       @default(1)
  expires     DateTime?

  History History[]
}
