// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  provider   String
  providerID String?  @map("provider_id")
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerID])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed     DateTime @default(now())

  @@map("sessions")
}

// table pour gérer tout de qui est interface web
model TheGame {
  id          Int     @id @default(1)
  description String?
}

model User {
  id            String  @id @default(cuid())
  name          String? @unique
  displayName   String?
  email         String? @unique
  emailVerified Boolean @default(false)
  image         String?
  isAdmin       Boolean @default(false)
  score         Int     @default(0)

  createdAt DateTime @default(now())

  fraternityId Int?
  fraternity   Fraternity? @relation(fields: [fraternityId], references: [id])

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Fraternity {
  id    Int    @id @default(autoincrement())
  name  String @unique
  score Int    @default(0)

  users User[]
}

model Quest {
  id          Int       @id @default(autoincrement())
  title       String
  img         String?
  description String?
  lore        String?
  global      Boolean   @default(true)
  points      Int       @default(1)
  starts      DateTime?
  ends        DateTime?
  createdAt   DateTime  @default(now())

  Code Code[]
}

model hasFinished {
  playerName String
  questId    Int

  date    DateTime? @default(now())
  expires DateTime?

  @@id([playerName, questId])
}

model PointsHistory {
  id          Int      @id @default(autoincrement())
  playerName  String
  questId     Int?
  points      Int
  date        DateTime @default(now())
  description String?
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Code {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  isQuest     Boolean   @default(false) // true si c'ça représente la fin d'une quête, faux si c'est juste des points
  questId     Int?
  quest       Quest?    @relation(fields: [questId], references: [id])
  points      Int?
  expires     DateTime?
}
